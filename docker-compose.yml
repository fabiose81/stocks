version: '3.1'

services:
  zookeeper: 
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - stocks
  kafka: 
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka
    ports:
      - "29092:29092"
    networks:
      - stocks
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 
      KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL_SAME_HOST://:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL_SAME_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS_SEPARATOR: "$$'\n'"
      KAFKA_CREATE_TOPICS: | 
        stock_analyse:1:1
        stock_analyse_result:1:1

  analyse:
    container_name: analyse
    build: 
      context: ./python
      dockerfile: Dockerfile
    environment:
      KAFKA_BOOTSTRAP_SERVER: kafka:9092
      KAFKA_GROUP_ID: group_1
      KAFKA_TOPIC_PRODUCER: stock_analyse_result
      KAFKA_TOPIC_CONSUMER: stock_analyse
      KAFKA_AUTO_COMMIT: true
      KAFKA_OFFSET_RESET: smallest
    depends_on:
      - kafka
    networks:
      - stocks

  database:
    image: mongo:latest
    container_name: database
    ports:
      - "7017:27017"
    networks:
      - stocks
    restart: unless-stopped
    env_file:
      - ./nodejs/stock_collect/.env
    volumes:
       - ./mongodb/stock_data:/data/db

  collect:
    container_name: collect
    build: 
      context: ./nodejs
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
      - "8080:8080"
    env_file:
      - ./nodejs/stock_collect/.env
    environment:
      KAFKA_BOOTSTRAP_SERVER: kafka:9092
      KAFKA_GROUP_ID: group_2
      KAFKA_TOPIC_PRODUCER: stock_analyse
      KAFKA_TOPIC_CONSUMER: stock_analyse_result
      KAFKA_AUTO_COMMIT: false
      KAFKA_OFFSET_RESET: smallest
      KAFKA_SUBSCRIBE_FROM_BEGINNING: true
    depends_on:
      - kafka
      - database
    networks:
      - stocks

  dashboard:
    container_name: dashboard
    build: 
      context: ./reactjs
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - collect
    networks:
      - stocks

networks:
  stocks:
    driver: bridge